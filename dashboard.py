import json
from pathlib import Path

import pandas as pd
import streamlit as st
import altair as alt

# Path to CSV generated by the running strategy
CSV_FILE = Path(__file__).parent / "strategy_state.csv"

st.set_page_config(
    page_title="Tycho Hedge – Strategy Dashboard",
    page_icon="🛡️",
    layout="wide",
    initial_sidebar_state="collapsed",
)

st.markdown("## 🛡️ Tycho Hedge &nbsp;›&nbsp; Strategy Dashboard")

# ---------------------------------------------------------------------------
# Utilities
# ---------------------------------------------------------------------------

def load_state() -> pd.DataFrame:
    """Read the CSV file and return a DataFrame with parsed JSON columns."""
    if not CSV_FILE.exists():
        st.error(f"CSV file not found: {CSV_FILE}")
        st.stop()

    df = pd.read_csv(CSV_FILE)
    if df.empty:
        st.warning("No data found in CSV file yet…")
        st.stop()

    df["timestamp"] = pd.to_datetime(df["timestamp"], utc=True)
    # Parse the JSON column and normalise into a flat table
    json_cols = df["json_data"].apply(json.loads)
    metrics_df = pd.json_normalize(json_cols)

    # Combine timestamp with metrics
    full_df = pd.concat([df["timestamp"], metrics_df], axis=1)

    # Derived fields
    full_df["total_value"] = (
        full_df["hyperliquid_account_value"]
        + full_df["unichain_usdc_balance"]
        + full_df["unichain_asset_balance"] * full_df["hyperliquid_asset_price"]
    )
    return full_df.sort_values("timestamp")


def human_fmt(num: float) -> str:
    """Format large numbers with commas and 2-decimal precision."""
    return f"${num:,.2f}"


def compute_metrics(df: pd.DataFrame):
    latest = df.iloc[-1]
    first = df.iloc[0]

    pnl_abs = latest["total_value"] - first["total_value"]
    pnl_pct = pnl_abs / first["total_value"] if first["total_value"] else 0

    metrics = {
        "PnL": (pnl_abs, pnl_pct),
        "AUM": latest["total_value"],
        "Price": latest["hyperliquid_asset_price"],
        # Liquidation price is not directly available – approximate or mark as N/A
        "Liq. Price": latest.get("liquidation_price", float("nan")),
    }
    return metrics, latest


# ---------------------------------------------------------------------------
# Sidebar – time-range selector
# ---------------------------------------------------------------------------

with st.sidebar:
    st.markdown("### Time range")
    range_choice = st.radio(
        label="Select range",
        options=["1D", "1W", "1M", "3M", "All"],
        index=4,
        horizontal=True,
    )

# ---------------------------------------------------------------------------
# Main layout
# ---------------------------------------------------------------------------

state_df = load_state()

# Filter by range
now = state_df["timestamp"].max()
if range_choice != "All":
    delta_map = {"1D": "1D", "1W": "7D", "1M": "30D", "3M": "90D"}
    cutoff = now - pd.to_timedelta(delta_map[range_choice])
    filtered_df = state_df[state_df["timestamp"] >= cutoff]
else:
    filtered_df = state_df

# ---------------------------------------------------------------------------
# KPI cards
# ---------------------------------------------------------------------------

metrics, latest = compute_metrics(state_df)

col1, col2, col3, col4 = st.columns(4)

# PnL – show value and change
pnl_val, pnl_pct = metrics["PnL"]
with col1:
    st.metric("PnL", human_fmt(pnl_val), f"{pnl_pct*100:.2f}%")

with col2:
    st.metric("AUM", human_fmt(metrics["AUM"]))

with col3:
    st.metric("Price", human_fmt(metrics["Price"]))

with col4:
    liq_price = metrics["Liq. Price"]
    st.metric("Liq. Price", human_fmt(liq_price) if pd.notna(liq_price) else "—")

# ---------------------------------------------------------------------------
# Line chart – PnL over time
# ---------------------------------------------------------------------------

plot_df = filtered_df.copy()
plot_df["PnL"] = plot_df["total_value"] - state_df.iloc[0]["total_value"]

line_chart = (
    alt.Chart(plot_df)
    .mark_line(color="#00F5A8", strokeWidth=3)
    .encode(x="timestamp:T", y="PnL:Q")
    .properties(height=300)
    .interactive()
)

st.altair_chart(line_chart, use_container_width=True)

# ---------------------------------------------------------------------------
# Recent trades – very naive derivation from position size changes
# ---------------------------------------------------------------------------

trade_df = state_df.copy()
trade_df["perp_change"] = trade_df["hyperliquid_perp_position_size"].diff()
trade_df = trade_df[trade_df["perp_change"] != 0]

if not trade_df.empty:
    recent_trades = trade_df.tail(10).copy()
    recent_trades["Side"] = recent_trades["perp_change"].apply(lambda x: "Buy" if x > 0 else "Sell")
    recent_trades["Asset"] = "ETH-PERP"
    recent_trades["Size"] = recent_trades["perp_change"].abs()
    recent_trades["USD Value"] = recent_trades["Size"] * recent_trades["hyperliquid_asset_price"]
    recent_trades["Gas"] = "$0.00"  # not tracked
    view_cols = [
        "Side",
        "Asset",
        "Size",
        "timestamp",
        "USD Value",
        "Gas",
    ]
    st.markdown("### Recent Trades")
    st.dataframe(
        recent_trades[view_cols].rename(columns={"timestamp": "Time"}).sort_values("Time", ascending=False),
        use_container_width=True,
    )
else:
    st.markdown("### Recent Trades")
    st.info("No trades recorded yet.")

# ---------------------------------------------------------------------------
# Footer
# ---------------------------------------------------------------------------

st.markdown(
    """<div style='text-align: center; color: grey;'>
    2025 © PropellerHeads
    </div>""",
    unsafe_allow_html=True,
)