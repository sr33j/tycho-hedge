import json
from pathlib import Path

import pandas as pd
import streamlit as st
import altair as alt

# Path to CSV generated by the running strategy
CSV_FILE = Path(__file__).parent / "strategy_state.csv"

# Strategy constants (matching main.py)
TARGET_LEVERAGE = 3
LEVERAGE_BUFFER = 0.5

st.set_page_config(
    page_title="Tycho Funding Rate Arbitrage. – Strategy Dashboard",
    page_icon="🛡️",
    layout="wide",
    initial_sidebar_state="collapsed",
)

st.markdown("## 🛡️ Tycho Funding Rate Arbitrage. &nbsp;›&nbsp; Strategy Dashboard")

# ---------------------------------------------------------------------------
# Utilities
# ---------------------------------------------------------------------------

def load_state() -> pd.DataFrame:
    """Read the CSV file and return a DataFrame with parsed JSON columns."""
    if not CSV_FILE.exists():
        st.error(f"CSV file not found: {CSV_FILE}")
        st.stop()

    df = pd.read_csv(CSV_FILE)
    if df.empty:
        st.warning("No data found in CSV file yet…")
        st.stop()

    df["timestamp"] = pd.to_datetime(df["timestamp"], utc=True)
    # Parse the JSON column and normalise into a flat table
    json_cols = df["json_data"].apply(json.loads)
    metrics_df = pd.json_normalize(json_cols).drop(columns=["timestamp"])

    # Combine timestamp with metrics
    full_df = pd.concat([df["timestamp"], metrics_df], axis=1)

    # Derived fields
    full_df["total_value"] = (
        full_df["hyperliquid_account_value"]
        + full_df["unichain_usdc_balance"]
        + full_df["unichain_asset_balance"] * full_df["hyperliquid_asset_price"]
        + full_df.get("arbitrum_usdc_balance", 0)  # Handle missing column gracefully
    )
    
    # Calculate position value and collateral info
    full_df["position_value"] = abs(full_df["hyperliquid_perp_position_size"]) * full_df["hyperliquid_asset_price"]
    full_df["collateral"] = full_df["hyperliquid_account_value"]
    
    return full_df.sort_values("timestamp")


def human_fmt(num: float) -> str:
    """Format large numbers with commas and 2-decimal precision."""
    if pd.isna(num):
        return "—"
    return f"${num:,.2f}"


def format_asset_amount(num: float, decimals: int = 4) -> str:
    """Format asset amounts without dollar sign."""
    if pd.isna(num):
        return "—"
    return f"{num:,.{decimals}f}"


def get_leverage_status_color(current_leverage: float) -> str:
    """Get leverage status color based on current leverage."""
    if TARGET_LEVERAGE - LEVERAGE_BUFFER <= current_leverage <= TARGET_LEVERAGE + LEVERAGE_BUFFER:
        return "green"
    elif TARGET_LEVERAGE - LEVERAGE_BUFFER * 1.5 <= current_leverage <= TARGET_LEVERAGE + LEVERAGE_BUFFER * 1.5:
        return "orange"
    else:
        return "red"


def compute_metrics(df: pd.DataFrame):
    latest = df.iloc[-1]
    first = df.iloc[0]

    pnl_abs = latest["total_value"] - first["total_value"]
    pnl_pct = pnl_abs / first["total_value"] if first["total_value"] else 0

    metrics = {
        "PnL": (pnl_abs, pnl_pct),
        "AUM": latest["total_value"],
        "Current Leverage": latest.get("current_leverage", 0),
        "Target Leverage": TARGET_LEVERAGE,
        "Price": latest["hyperliquid_asset_price"],
        "Collateral": latest["collateral"],
        "Position Size": latest["hyperliquid_perp_position_size"],
        "Position Value": latest["position_value"],
        "Funding Rate": latest.get("funding_rate", 0),
        "Arbitrum USDC": latest.get("arbitrum_usdc_balance", 0),
        "Unichain USDC": latest["unichain_usdc_balance"],
        "Unichain Asset": latest["unichain_asset_balance"],
    }
    return metrics, latest


# ---------------------------------------------------------------------------
# Sidebar – time-range selector
# ---------------------------------------------------------------------------

with st.sidebar:
    st.markdown("### Time range")
    range_choice = st.radio(
        label="Select range",
        options=["1D", "1W", "1M", "3M", "All"],
        index=4,
        horizontal=True,
    )
    
    st.markdown("---")
    st.markdown("### Strategy Parameters")
    st.markdown(f"**Target Leverage:** {TARGET_LEVERAGE}x")
    st.markdown(f"**Leverage Buffer:** ±{LEVERAGE_BUFFER}x")
    st.markdown(f"**Acceptable Range:** {TARGET_LEVERAGE - LEVERAGE_BUFFER}x - {TARGET_LEVERAGE + LEVERAGE_BUFFER}x")

# ---------------------------------------------------------------------------
# Main layout
# ---------------------------------------------------------------------------

state_df = load_state()

# Filter by range
now = state_df["timestamp"].max()
if range_choice != "All":
    delta_map = {"1D": "1D", "1W": "7D", "1M": "30D", "3M": "90D"}
    cutoff = now - pd.to_timedelta(delta_map[range_choice])
    filtered_df = state_df[state_df["timestamp"] >= cutoff]
else:
    filtered_df = state_df

# ---------------------------------------------------------------------------
# KPI cards - Enhanced with leverage info
# ---------------------------------------------------------------------------

metrics, latest = compute_metrics(state_df)

# First row: Key metrics
col1, col2, col3, col4 = st.columns(4)

# PnL
pnl_val, pnl_pct = metrics["PnL"]
with col1:
    st.metric("PnL", human_fmt(pnl_val), f"{pnl_pct*100:.2f}%")

# Total AUM
with col2:
    st.metric("AUM", human_fmt(metrics["AUM"]))

# Current Leverage with color indicator
with col3:
    current_lev = metrics["Current Leverage"]
    leverage_delta = f"Target: {TARGET_LEVERAGE}x"
    st.metric("Current Leverage", f"{current_lev:.2f}x", leverage_delta)

# Collateral
with col4:
    st.metric("Hyperliquid Collateral", human_fmt(metrics["Collateral"]))

# ---------------------------------------------------------------------------
# Second row: Position and chain details
# ---------------------------------------------------------------------------

st.markdown("---")
col1, col2 = st.columns(2)

with col1:
    st.metric("Mark Price", human_fmt(metrics["Price"]))

with col2:
    funding_rate = metrics["Funding Rate"] * 100
    st.metric("Funding Rate (7d)", f"{funding_rate:.4f}%")

# ---------------------------------------------------------------------------
# Asset distribution section
# ---------------------------------------------------------------------------

st.markdown("---")
st.markdown("### Asset Distribution")

# Get asset symbol - default to ETH
asset_symbol = "ETH"  # Could be made dynamic based on config

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("#### 🔷 Arbitrum")
    st.metric("USDC Balance", human_fmt(metrics["Arbitrum USDC"]))

with col2:
    st.markdown("#### 🔗 Unichain")
    st.metric("USDC Balance", human_fmt(metrics["Unichain USDC"]))
    asset_value_usd = metrics["Unichain Asset"] * metrics["Price"]
    st.metric(f"{asset_symbol} Balance", 
              f"{format_asset_amount(metrics['Unichain Asset'])} ({human_fmt(asset_value_usd)})")

with col3:
    st.markdown("#### 📊 Hyperliquid")
    st.metric("Account Value", human_fmt(metrics["Collateral"]))
    st.metric("Position Size", f"{format_asset_amount(abs(metrics['Position Size']))} {asset_symbol}")

# ---------------------------------------------------------------------------
# Line chart – PnL over time with tabs
# ---------------------------------------------------------------------------

st.markdown("---")
st.markdown("### Performance Charts")

tab1, tab2, tab3 = st.tabs(["PnL History", "Leverage History", "Chain Distribution"])

plot_df = filtered_df.copy()
plot_df["PnL"] = plot_df["total_value"] - state_df.iloc[0]["total_value"]

with tab1:
    line_chart = (
        alt.Chart(plot_df)
        .mark_line(color="#00F5A8", strokeWidth=3)
        .encode(
            x="timestamp:T",
            y="PnL:Q",
            tooltip=["timestamp:T", "PnL:Q", "total_value:Q"]
        )
        .properties(height=300)
        .interactive()
    )
    st.altair_chart(line_chart, use_container_width=True)

with tab2:
    # Leverage chart with reference lines
    leverage_chart = (
        alt.Chart(plot_df)
        .mark_line(color="#FF6B6B", strokeWidth=2)
        .encode(
            x="timestamp:T",
            y=alt.Y("current_leverage:Q", scale=alt.Scale(domain=[0, 5])),
            tooltip=["timestamp:T", "current_leverage:Q"]
        )
    )
    
    # Target and buffer lines
    target_line = alt.Chart(pd.DataFrame({'y': [TARGET_LEVERAGE]})).mark_rule(
        color='green', strokeDash=[5, 5]
    ).encode(y='y')
    
    upper_buffer = alt.Chart(pd.DataFrame({'y': [TARGET_LEVERAGE + LEVERAGE_BUFFER]})).mark_rule(
        color='orange', strokeDash=[3, 3]
    ).encode(y='y')
    
    lower_buffer = alt.Chart(pd.DataFrame({'y': [TARGET_LEVERAGE - LEVERAGE_BUFFER]})).mark_rule(
        color='orange', strokeDash=[3, 3]
    ).encode(y='y')
    
    combined = (leverage_chart + target_line + upper_buffer + lower_buffer).properties(height=300).interactive()
    st.altair_chart(combined, use_container_width=True)

with tab3:
    # Prepare stacked area data
    plot_df["Hyperliquid"] = plot_df["hyperliquid_account_value"]
    plot_df["Arbitrum"] = plot_df.get("arbitrum_usdc_balance", 0)
    plot_df["Unichain"] = plot_df["unichain_usdc_balance"] + plot_df["unichain_asset_balance"] * plot_df["hyperliquid_asset_price"]
    
    value_cols = ["Hyperliquid", "Arbitrum", "Unichain"]
    melted_df = plot_df[["timestamp"] + value_cols].melt(
        id_vars=["timestamp"],
        value_vars=value_cols,
        var_name="Chain",
        value_name="Value"
    )
    
    area_chart = (
        alt.Chart(melted_df)
        .mark_area()
        .encode(
            x="timestamp:T",
            y=alt.Y("Value:Q", stack="zero"),
            color=alt.Color("Chain:N", scale=alt.Scale(
                domain=["Hyperliquid", "Arbitrum", "Unichain"],
                range=["#1f77b4", "#ff7f0e", "#2ca02c"]
            )),
            tooltip=["timestamp:T", "Chain:N", "Value:Q"]
        )
        .properties(height=300)
        .interactive()
    )
    st.altair_chart(area_chart, use_container_width=True)

# ---------------------------------------------------------------------------
# Recent trades – very naive derivation from position size changes
# ---------------------------------------------------------------------------

trade_df = state_df.copy()
trade_df["perp_change"] = trade_df["hyperliquid_perp_position_size"].diff()
trade_df = trade_df[trade_df["perp_change"] != 0]

if not trade_df.empty:
    recent_trades = trade_df.tail(10).copy()
    recent_trades["Side"] = recent_trades["perp_change"].apply(lambda x: "Buy" if x > 0 else "Sell")
    recent_trades["Asset"] = f"{asset_symbol}-PERP"
    recent_trades["Size"] = recent_trades["perp_change"].abs()
    recent_trades["USD Value"] = recent_trades["Size"] * recent_trades["hyperliquid_asset_price"]
    recent_trades["Leverage After"] = recent_trades.get("current_leverage", 0)
    
    view_cols = [
        "Side",
        "Asset",
        "Size",
        "timestamp",
        "USD Value",
        "Leverage After",
    ]
    st.markdown("### Recent Trades")
    display_df = recent_trades[view_cols].rename(columns={
        "timestamp": "Time",
        "Leverage After": "Leverage"
    }).sort_values("Time", ascending=False)
    
    # Format the display
    display_df["Size"] = display_df["Size"].apply(lambda x: format_asset_amount(x))
    display_df["USD Value"] = display_df["USD Value"].apply(lambda x: human_fmt(x))
    display_df["Leverage"] = display_df["Leverage"].apply(lambda x: f"{x:.2f}x")
    
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True,
    )
else:
    st.markdown("### Recent Trades")
    st.info("No trades recorded yet.")

# ---------------------------------------------------------------------------
# Footer
# ---------------------------------------------------------------------------

st.markdown(
    """<div style='text-align: center; color: grey;'>
    2025 © PropellerHeads
    </div>""",
    unsafe_allow_html=True,
)